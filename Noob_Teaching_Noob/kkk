# chatbot.py
import joblib
import random
from utils import load_json, find_most_similar  # Assuming find_most_similar is in utils.py

class MyChatbot:
    def __init__(self):
        # Load trained machine learning model
        self.model = joblib.load('chatbot_model.pkl')
        
        # Load fallback responses and tasks
        self.fallback_responses = load_json("fallback_responses.json")

    def process_input(self, user_input):
        # Predict intent using machine learning model
        predicted_intent = self.model.predict([user_input])[0]
        
        # Generate response based on predicted intent
        response = self._get_response(predicted_intent)
        
        # If the model is uncertain, fallback to rule-based method
        if not response:
            response, task = self._get_fallback_response_and_task(user_input)
            if task:
                self._execute_task(task)
        
        return response

    def _get_response(self, intent):
        # Code to generate a response based on the predicted intent
        # This could be a simple lookup in a dictionary based on 'intent'
        pass

    def _get_fallback_response_and_task(self, user_input):
        # Code to get the fallback response and task based on rule-based method
        # Similar to chatbot_response function discussed earlier
        pass

    def _execute_task(self, task):
        # Code to execute the task
        # This could be running a script, opening a file, etc.
        pass

if __name__ == "__main__":
    chatbot = MyChatbot()
    
    print("Chatbot is ready. Type 'quit' to exit.")
    
    while True:
        user_input = input("You: ")
        if user_input.lower() == 'quit':
            break

        response = chatbot.process_input(user_input)
        print(f"Chatbot: {response}")



# train_model.py

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
import joblib
from utils import load_json

def train_chatbot_model():
    intents = load_json("intents.json")["intents"]
    X_train = []
    y_train = []
  
    for intent in intents:
        for pattern in intent["patterns"]:
            X_train.append(pattern)
            y_train.append(intent["tag"])

    text_clf = Pipeline([
        ('vectorizer', CountVectorizer()),
        ('classifier', MultinomialNB()),
    ])

    text_clf.fit(X_train, y_train)

    joblib.dump(text_clf, 'chatbot_model.pkl')

if __name__ == "__main__":
    train_chatbot_model()




# utils.py
import nltk
nltk.download('punkt', quiet=True)
nltk.download('wordnet', quiet=True)
from nltk.corpus import wordnet
import json

def load_json(filename):
    with open(filename, 'r') as f:
        data = json.load(f)
    return data


def find_most_similar(word, word_list):
    max_similarity = -1
    most_similar_word = ''
    
    for w in word_list:
        syn1 = wordnet.synsets(word)
        syn2 = wordnet.synsets(w)
        
        if syn1 and syn2:
            similarity = wordnet.wup_similarity(syn1[0], syn2[0])
            if similarity and similarity > max_similarity:
                max_similarity = similarity
                most_similar_word = w
                
    return most_similar_word


# fallback
[
    {
      "tag": "run_code",
      "patterns": ["execute code", "run script", "run python code"],
      "responses": ["Executing code..."],
      "task": "execute_code"
    },
    {
      "tag": "open_browser",
      "patterns": ["open browser", "search web", "go to website"],
      "responses": ["Opening web browser..."],
      "task": "open_browser"
    },
    {
      "tag": "calculate",
      "patterns": ["perform calculation", "calculate", "solve equation"],
      "responses": ["Calculating..."],
      "task": "perform_calculation"
    }
  ]



# intents.json

{
  "intents": [
    {
      "tag": "greeting",
      "patterns": ["Hi", "Hello", "How are you"],
      "responses": ["Hello!", "Hi there!", "How can I assist you?"]
    },
    {
      "tag": "goodbye",
      "patterns": ["Bye", "See you later", "Goodbye"],
      "responses": ["Goodbye!", "See you later!", "Have a nice day!"]
    },


    {
      "tag": "install_library",
      "patterns": ["How do I install a Python library?", "What is pip?", "pip installation"],
      "responses": ["You can install a Python library using pip. Here's how: `pip install <library_name>`."],
      "context_set": "Would you like to know more about managing Python packages?"
    },
    {
      "tag": "open_file",
      "patterns": ["How do I open a file in Python?", "Tell me about file handling"],
      "responses": ["To open a file in Python, you can use the `open` function. Here's a snippet:\n```python\nwith open('file.txt', 'r') as file:\n    content = file.read()\n```"],
      "context_set": "Would you like to learn about reading and writing to files?"
    },
    {
      "tag": "data_analysis",
      "patterns": ["Tell me about data analysis tools", "How do I analyze data?", "What is Pandas?"],
      "responses": ["For data analysis, you can use libraries like Pandas. A basic way to read a CSV file is:\n```python\nimport pandas as pd\ndata = pd.read_csv('data.csv')\n```"],
      "context_set": "Would you like to know more about data manipulation using Pandas?"
    }
  ]
} 
  
